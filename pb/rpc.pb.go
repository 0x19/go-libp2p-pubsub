// Code generated by protoc-gen-gogo.
// source: rpc.proto
// DO NOT EDIT!

/*
Package floodsub_pb is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	RPC
	Message
*/
package floodsub_pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RPC struct {
	Subscriptions    []*RPC_SubOpts `protobuf:"bytes,1,rep,name=subscriptions" json:"subscriptions,omitempty"`
	Publish          []*Message     `protobuf:"bytes,2,rep,name=publish" json:"publish,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *RPC) Reset()         { *m = RPC{} }
func (m *RPC) String() string { return proto.CompactTextString(m) }
func (*RPC) ProtoMessage()    {}

func (m *RPC) GetSubscriptions() []*RPC_SubOpts {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

func (m *RPC) GetPublish() []*Message {
	if m != nil {
		return m.Publish
	}
	return nil
}

type RPC_SubOpts struct {
	Subscribe        *bool  `protobuf:"varint,1,opt,name=subscribe" json:"subscribe,omitempty"`
	Topicid          []byte `protobuf:"bytes,2,opt,name=topicid" json:"topicid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RPC_SubOpts) Reset()         { *m = RPC_SubOpts{} }
func (m *RPC_SubOpts) String() string { return proto.CompactTextString(m) }
func (*RPC_SubOpts) ProtoMessage()    {}

func (m *RPC_SubOpts) GetSubscribe() bool {
	if m != nil && m.Subscribe != nil {
		return *m.Subscribe
	}
	return false
}

func (m *RPC_SubOpts) GetTopicid() []byte {
	if m != nil {
		return m.Topicid
	}
	return nil
}

type Message struct {
	MessageCid       []byte   `protobuf:"bytes,1,opt,name=messageCid" json:"messageCid,omitempty"`
	TopicIDs         [][]byte `protobuf:"bytes,2,rep,name=topicIDs" json:"topicIDs,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}

func (m *Message) GetMessageCid() []byte {
	if m != nil {
		return m.MessageCid
	}
	return nil
}

func (m *Message) GetTopicIDs() [][]byte {
	if m != nil {
		return m.TopicIDs
	}
	return nil
}

func init() {
	proto.RegisterType((*RPC)(nil), "floodsub.pb.RPC")
	proto.RegisterType((*RPC_SubOpts)(nil), "floodsub.pb.RPC.SubOpts")
	proto.RegisterType((*Message)(nil), "floodsub.pb.Message")
}
